name: 🚀 CD - Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: production
  cancel-in-progress: false

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build API
        run: pnpm turbo run build --filter=api

      - name: 🧪 Test API
        run: pnpm turbo run test --filter=api

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying API to production..."
          # Add your deployment commands here
          # Examples:
          # - Docker build and push
          # - Deploy to cloud provider
          # - Update production environment

  deploy-web:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Web
        run: pnpm turbo run build --filter=web
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          vercel-args: "--prod"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    if: always()

    steps:
      - name: 📢 Notify success
        if: needs.deploy-api.result == 'success' && needs.deploy-web.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          # Add notification logic (Slack, Discord, etc.)

      - name: 🚨 Notify failure
        if: needs.deploy-api.result == 'failure' || needs.deploy-web.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Add notification logic for failures
