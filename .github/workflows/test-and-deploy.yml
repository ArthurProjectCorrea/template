name: 🚀 Test and Deploy

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Build all packages
        run: pnpm build

      - name: 🧪 Test Backend
        run: pnpm --filter api test
        env:
          NODE_ENV: test

      - name: 🧪 Test Frontend
        run: pnpm --filter web test
        env:
          NODE_ENV: test

      - name: 📊 Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./apps/api/coverage/lcov.info,./apps/web/coverage/lcov.info
          fail_ci_if_error: false

  auto-merge:
    name: Auto Merge
    needs: build
    if: |
      success() && 
      github.event_name == 'pull_request' &&
      (github.actor == 'dependabot[bot]' || contains(github.event.pull_request.labels.*.name, 'auto-merge'))
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ✅ Auto approve
        if: github.actor == 'dependabot[bot]'
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔀 Enable auto-merge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash

  deploy:
    name: Deploy to Production
    needs: build
    if: |
      success() && 
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Build for production
        run: pnpm build
        env:
          NODE_ENV: production

      - name: 🚀 Deploy API
        run: |
          echo "🚀 Deploying API to production..."
          # Adicione aqui os comandos de deploy do seu backend
          # Exemplo: pnpm --filter api deploy:prod
        env:
          NODE_ENV: production

      - name: 🌐 Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
          working-directory: ./apps/web

      - name: 📢 Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Frontend: Deployed to Vercel"
          echo "🔧 API: Deployed to production"

      - name: ❌ Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs above for details."
